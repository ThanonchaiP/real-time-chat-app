name: Release

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Echo release tag
        run: 'echo "Release tag: ${{ github.event.release.tag_name }}"'

  build-frontend:
    if: startsWith(github.event.release.tag_name, 'frontend-') || startsWith(github.event.release.tag_name, 'v')
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_FRONTEND_REPOSITORY }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          cd client
          # Set image tag based on release tag pattern
          if [[ "$RELEASE_TAG" == v* ]]; then
            IMAGE_TAG="frontend-$RELEASE_TAG"
          else
            IMAGE_TAG="$RELEASE_TAG"
          fi
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Frontend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build-backend:
    if: startsWith(github.event.release.tag_name, 'backend-') || startsWith(github.event.release.tag_name, 'v')
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_BACKEND_REPOSITORY }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          cd server
          # Set image tag based on release tag pattern
          if [[ "$RELEASE_TAG" == v* ]]; then
            IMAGE_TAG="backend-$RELEASE_TAG"
          else
            IMAGE_TAG="$RELEASE_TAG"
          fi
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Backend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-frontend:
    if: startsWith(github.event.release.tag_name, 'frontend-') || startsWith(github.event.release.tag_name, 'v')
    needs: build-frontend
    uses: ./.github/workflows/deploy-k8s.yaml
    with:
      environment: "app-ns"
      service_name: "nextjs-app"
      image_tag: ${{ startsWith(github.event.release.tag_name, 'v') && format('frontend-{0}', github.event.release.tag_name) || github.event.release.tag_name }}
      ecr_repository: "chatapp-server"
    secrets:
      DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      DO_CLUSTER_ID: ${{ secrets.DO_CLUSTER_ID }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy-backend:
    if: startsWith(github.event.release.tag_name, 'backend-') || startsWith(github.event.release.tag_name, 'v')
    needs: build-backend
    uses: ./.github/workflows/deploy-k8s.yaml
    with:
      environment: "production"
      service_name: "backend"
      image_tag: ${{ startsWith(github.event.release.tag_name, 'v') && format('backend-{0}', github.event.release.tag_name) || github.event.release.tag_name }}
      ecr_repository: "chatapp-server"
    secrets:
      DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      DO_CLUSTER_ID: ${{ secrets.DO_CLUSTER_ID }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
