name: Deploy to DigitalOcean K8s

on:
    workflow_call:
        inputs:
            environment:
                required: true
                type: string
                description: "Environment to deploy to (staging/production)"
            service_name:
                required: true
                type: string
                description: "Service name (frontend/backend)"
            image_tag:
                required: true
                type: string
                description: "Docker image tag to deploy"
            ecr_repository:
                required: true
                type: string
                description: "ECR repository name"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN:
                required: true
            DO_CLUSTER_ID:
                required: true
            ECR_REGISTRY:
                required: true
            AWS_ACCESS_KEY_ID:
                required: true
            AWS_SECRET_ACCESS_KEY:
                required: true
            AWS_REGION:
                required: true

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

            - name: Configure kubectl for DigitalOcean
              run: |
                  doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_ID }}

            - name: Configure AWS credentials for ECR
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Create ECR secret and update deployment
              env:
                  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
                  ECR_REPOSITORY: ${{ inputs.ecr_repository }}
                  IMAGE_TAG: ${{ inputs.image_tag }}
                  SERVICE_NAME: ${{ inputs.service_name }}
                  ENVIRONMENT: ${{ inputs.environment }}
                  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
              run: |
                  # Set image for deployment
                  IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

                  # Validate and clean up IMAGE_TAG
                  CLEAN_IMAGE_TAG=$(echo "$IMAGE_TAG" | sed 's/[^a-zA-Z0-9._-]//g')
                  if [ "$IMAGE_TAG" != "$CLEAN_IMAGE_TAG" ]; then
                    echo "‚ö†Ô∏è Warning: IMAGE_TAG contained invalid characters. Cleaned: $IMAGE_TAG -> $CLEAN_IMAGE_TAG"
                    IMAGE_TAG="$CLEAN_IMAGE_TAG"
                    IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
                  fi

                  echo "üîÑ Updating deployment $SERVICE_NAME with image: $IMAGE_URI"
                  echo "üìù Registry: $ECR_REGISTRY"
                  echo "üìù Repository: $ECR_REPOSITORY" 
                  echo "üìù Tag: $IMAGE_TAG"

                  # Validate IMAGE_URI format
                  if [[ ! "$IMAGE_URI" =~ ^[a-zA-Z0-9][a-zA-Z0-9._-]*\.amazonaws\.com/[a-zA-Z0-9][a-zA-Z0-9._/-]*:[a-zA-Z0-9._-]+$ ]]; then
                    echo "‚ùå Invalid IMAGE_URI format: $IMAGE_URI"
                    echo "Expected format: registry.amazonaws.com/repository:tag"
                    exit 1
                  fi

                  # Create or update ECR image pull secret
                  echo "üîë Creating ECR image pull secret..."
                  ECR_TOKEN=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)

                  kubectl delete secret ecr-registry-secret -n $ENVIRONMENT --ignore-not-found=true
                  kubectl create secret docker-registry ecr-registry-secret \
                    --docker-server=$ECR_REGISTRY \
                    --docker-username=AWS \
                    --docker-password="$ECR_TOKEN" \
                    -n $ENVIRONMENT

                  # Check current deployment status before update
                  echo "üìã Current deployment status:"
                  kubectl get deployment $SERVICE_NAME -n $ENVIRONMENT || echo "Deployment not found"
                  kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME || echo "No pods found"

                  # Verify image exists in ECR
                  echo "üîç Verifying image exists in ECR..."
                  aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag="$IMAGE_TAG" --region $AWS_DEFAULT_REGION || {
                    echo "‚ùå Image $ECR_REPOSITORY:$IMAGE_TAG not found in ECR!"
                    echo "üìã Available images in repository:"
                    aws ecr describe-images --repository-name "$ECR_REPOSITORY" --region $AWS_DEFAULT_REGION --query 'imageDetails[*].imageTags' --output table || echo "Failed to list images"
                    exit 1
                  }

                  # Update deployment image
                  kubectl set image deployment/$SERVICE_NAME $SERVICE_NAME=$IMAGE_URI -n $ENVIRONMENT

                  # Patch deployment to use imagePullSecret  
                  echo "üîë Patching deployment to use ECR secret..."
                  kubectl patch deployment $SERVICE_NAME -n $ENVIRONMENT -p '{
                    "spec": {
                      "template": {
                        "spec": {
                          "imagePullSecrets": [
                            {
                              "name": "ecr-registry-secret"
                            }
                          ]
                        }
                      }
                    }
                  }'

                  # Restart rollout to apply changes
                  kubectl rollout restart deployment/$SERVICE_NAME -n $ENVIRONMENT

                  # Wait for rollout to complete with longer timeout
                  echo "‚è≥ Waiting for rollout to complete..."
                  kubectl rollout status deployment/$SERVICE_NAME -n $ENVIRONMENT --timeout=600s || {
                    echo "‚ùå Rollout failed or timed out. Checking status..."
                    
                    # Debug information
                    echo "üìã Deployment describe:"
                    kubectl describe deployment $SERVICE_NAME -n $ENVIRONMENT
                    
                    echo "üìã Pod status:"
                    kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME -o wide
                    
                    echo "üìã Events:"
                    kubectl get events -n $ENVIRONMENT --sort-by=.metadata.creationTimestamp | tail -20
                    
                    # Try to get logs from failing pods
                    echo "üìã Pod logs:"
                    kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME --field-selector=status.phase!=Running -o name | head -3 | xargs -I {} kubectl logs {} -n $ENVIRONMENT --tail=50 || true
                    
                    exit 1
                  }

                  # Verify deployment
                  kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME

                  echo "‚úÖ Successfully deployed $SERVICE_NAME:$IMAGE_TAG to $ENVIRONMENT"

            - name: Run deployment verification
              env:
                  SERVICE_NAME: ${{ inputs.service_name }}
                  ENVIRONMENT: ${{ inputs.environment }}
              run: |
                  echo "üîç Running final verification..."

                  # Check if deployment is ready with longer timeout
                  kubectl wait --for=condition=available --timeout=600s deployment/$SERVICE_NAME -n $ENVIRONMENT || {
                    echo "‚ùå Deployment not ready. Final status check:"
                    kubectl get deployment $SERVICE_NAME -n $ENVIRONMENT
                    kubectl describe deployment $SERVICE_NAME -n $ENVIRONMENT
                    exit 1
                  }

                  # Get service info
                  echo "üìã Final Deployment Status:"
                  kubectl get deployment $SERVICE_NAME -n $ENVIRONMENT

                  echo "üìã Final Pod Status:"
                  kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME -o wide

                  # Check if all pods are running
                  RUNNING_PODS=$(kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME --field-selector=status.phase=Running --no-headers | wc -l)
                  TOTAL_PODS=$(kubectl get pods -n $ENVIRONMENT -l app=$SERVICE_NAME --no-headers | wc -l)

                  echo "üìä Pods Summary: $RUNNING_PODS/$TOTAL_PODS running"

                  if [ "$RUNNING_PODS" -eq "$TOTAL_PODS" ]; then
                    echo "‚úÖ All pods are running successfully!"
                  else
                    echo "‚ö†Ô∏è Some pods are not running. Check logs above."
                  fi
