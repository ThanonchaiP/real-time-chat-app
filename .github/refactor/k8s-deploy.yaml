name: Deploy to Kubernetes

on:
    workflow_call:
        inputs:
            service_name:
                required: true
                type: string
                description: "Service name for deployment"
            namespace:
                required: true
                type: string
                description: "Kubernetes namespace"
            image_uri:
                required: true
                type: string
                description: "Full Docker image URI"
            timeout:
                required: false
                type: string
                default: "600s"
                description: "Deployment timeout"
        secrets:
            DIGITALOCEAN_ACCESS_TOKEN:
                required: true
            DO_CLUSTER_ID:
                required: true

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

            - name: Configure kubectl for DigitalOcean
              run: |
                  doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_ID }}

            - name: Update deployment
              env:
                  SERVICE_NAME: ${{ inputs.service_name }}
                  NAMESPACE: ${{ inputs.namespace }}
                  IMAGE_URI: ${{ inputs.image_uri }}
                  TIMEOUT: ${{ inputs.timeout }}
              run: |
                  echo "üîÑ Deploying $SERVICE_NAME to namespace: $NAMESPACE"
                  echo "üìù Image: $IMAGE_URI"

                  # Check current status
                  echo "üìã Current deployment status:"
                  kubectl get deployment $SERVICE_NAME -n $NAMESPACE || echo "Deployment not found"
                  kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME || echo "No pods found"

                  # Update deployment image
                  kubectl set image deployment/$SERVICE_NAME $SERVICE_NAME=$IMAGE_URI -n $NAMESPACE

                  # Patch deployment to use imagePullSecret
                  echo "üîë Ensuring imagePullSecret is configured..."
                  kubectl patch deployment $SERVICE_NAME -n $NAMESPACE -p '{
                    "spec": {
                      "template": {
                        "spec": {
                          "imagePullSecrets": [
                            {
                              "name": "ecr-registry-secret"
                            }
                          ]
                        }
                      }
                    }
                  }'

                  # Restart rollout
                  kubectl rollout restart deployment/$SERVICE_NAME -n $NAMESPACE

                  # Wait for rollout completion
                  echo "‚è≥ Waiting for rollout to complete (timeout: $TIMEOUT)..."
                  kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE --timeout=$TIMEOUT || {
                    echo "‚ùå Rollout failed or timed out!"
                    
                    echo "üìã Deployment details:"
                    kubectl describe deployment $SERVICE_NAME -n $NAMESPACE
                    
                    echo "üìã Pod status:"
                    kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME -o wide
                    
                    echo "üìã Recent events:"
                    kubectl get events -n $NAMESPACE --sort-by=.metadata.creationTimestamp | tail -20
                    
                    echo "üìã Pod logs (failed pods):"
                    kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME --field-selector=status.phase!=Running -o name | head -3 | \
                      xargs -I {} kubectl logs {} -n $NAMESPACE --tail=50 || true
                    
                    exit 1
                  }

                  echo "‚úÖ Deployment completed successfully!"

            - name: Verify deployment
              env:
                  SERVICE_NAME: ${{ inputs.service_name }}
                  NAMESPACE: ${{ inputs.namespace }}
                  TIMEOUT: ${{ inputs.timeout }}
              run: |
                  echo "üîç Running deployment verification..."

                  # Wait for deployment to be available
                  kubectl wait --for=condition=available --timeout=$TIMEOUT deployment/$SERVICE_NAME -n $NAMESPACE || {
                    echo "‚ùå Deployment not ready!"
                    kubectl get deployment $SERVICE_NAME -n $NAMESPACE
                    exit 1
                  }

                  # Get final status
                  echo "üìã Final deployment status:"
                  kubectl get deployment $SERVICE_NAME -n $NAMESPACE

                  echo "üìã Final pod status:"
                  kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME -o wide

                  # Count running pods
                  RUNNING_PODS=$(kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME --field-selector=status.phase=Running --no-headers | wc -l)
                  TOTAL_PODS=$(kubectl get pods -n $NAMESPACE -l app=$SERVICE_NAME --no-headers | wc -l)

                  echo "üìä Pods summary: $RUNNING_PODS/$TOTAL_PODS running"

                  if [ "$RUNNING_PODS" -eq "$TOTAL_PODS" ]; then
                    echo "‚úÖ All pods are running successfully!"
                  else
                    echo "‚ö†Ô∏è Some pods are not running properly"
                    exit 1
                  fi
